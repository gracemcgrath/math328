from math import e, factorial, pi, sqrtimport numpy as np## 1.1 for textbook# Computers the stirling approximation for a factorial and returns # both the absolute and the relative error # to evaluate enter stirling_approx() in the terminal def stirling_approx():    abs(2)    n = int(input("What is the factorial you want to approximate? "))    approx = (sqrt(2*pi*n))*((n/e)**n)    actual = factorial(n)        #calculate absolute error    abs_err = abs(actual -approx)        #calculate relative error     rel_err = abs(abs_err/approx)        print("Here is the approximation: ", approx)    print("Here is the actual value: ",actual)    print("Here is the absolute error: ", abs_err)    print("Here is the relative error: ",rel_err)    return## 1.4 for textbook - onion problem # c is an input array derived from a polynomial of the form:#       p(x) = c[0] + c[2]x + c[3]x^2+ ... + c[n+1]x^n# where n is the degree of the polynomial function # to evaluate enter onion(x,c) in the terminal c =np.array([-12,-1,-13,1,1],float) # for p(x) = x^4 + x^3 - 13x^2 - x - 12def onion(x,c):        n = len(c)-1    print("number of steps", n)    p=c[n]    for i in range(n-1,-1,-1):        p = p*x+c[i]            print("final asnwer: ",p)    return